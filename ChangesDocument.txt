# ImageAnalysis Refactoring: Detailed Migration Plan

This document provides a comprehensive mapping of functions and classes from the original codebase to the new structure, including information about interface changes and new components.

## Table of Contents
1. [In_Situ_Functions.py Migration](#1-in_situ_functionspy-migration)
2. [Mapping_Functions.py Migration](#2-mapping_functionspy-migration)
3. [Album_Functions.py Migration](#3-album_functionspy-migration)
4. [Script Files Migration](#4-script-files-migration)
5. [New Components to Create](#5-new-components-to-create)
6. [Integration Components](#6-integration-components)
7. [Implementation Notes](#7-implementation-notes)

## 1. In_Situ_Functions.py Migration

### Original File: `In_Situ_Functions.py`

#### Moving to: `ImageAnalysis/utils/io.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `InSitu.Import_ND2_by_Tile_and_Well()` | `ImageLoader.load_nd2_image()` | Now a method of `ImageLoader` class; takes self as first argument |
| `InSitu.Assemble_Data_From_ND2()` | `ImageLoader.load_cycles_for_tile()` | Now a method of `ImageLoader` class; more consistent error handling |

#### Moving to: `ImageAnalysis/core/segmentation/cell_segmentation.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `Segment.Segment_Nuclei()` | `CellSegmentation.segment_nuclei()` | Class method with explicit parameters instead of globals |
| `Segment.Segment_Cells()` | `CellSegmentation.segment_cells()` | Addition of optional nuclear guidance parameter |
| `Segment.extract_props()` | `CellSegmentation._extract_properties()` | Made private, used internally by the class |
| `Segment.Label_and_Clean()` | `CellSegmentation.clean_and_label()` | Simplified interface, returns cleaned masks |
| `Segment.Plot_Segmented()` | `CellSegmentation._plot_segmentation()` | Made private, optional debugging visualization |

#### Moving to: `ImageAnalysis/core/genotyping/peak_calling.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `InSitu.Find_Peaks()` | `Genotyper.find_peaks()` | Now returns structured object instead of multiple arrays |
| `InSitu.Call_Bases()` | `Genotyper.call_bases()` | Takes explicit parameters instead of globals |
| `InSitu.Assign_Simple_Ambiguity()` | `Genotyper._assign_ambiguity()` | Made private, called by `call_bases()` |

#### Moving to: `ImageAnalysis/core/genotyping/barcode_assignment.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `Lookup.Split_Nucleotides()` | `Genotyper._split_nucleotides()` | Private helper method in Genotyper |
| `Lookup.Choose_Barcodes()` | `Genotyper.assign_barcodes()` | Consolidated version of the multiple Choose_* methods |
| `Lookup.Choose_Barcodes_V1()` | Removed | Functionality consolidated into `assign_barcodes()` |
| `Lookup.Choose_Barcodes_V2()` | Removed | Functionality consolidated into `assign_barcodes()` |
| `Lookup.Choose_Barcodes_Blast()` | Removed | Functionality consolidated into `assign_barcodes()` |
| `Lookup.Choose_Barcode_Single_Cell()` | `Genotyper._assign_barcode_to_cell()` | Private helper method |

#### Moving to: `ImageAnalysis/core/visualization/plots.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `InSitu.Plot_Reads()` | `Visualizer.plot_reads()` | Takes explicit DataFrame instead of globals |
| `QC.Quality_Score_Plots()` | `Visualizer.create_quality_plots()` | More flexible interface with output path |
| `QC.Plot_Against_Bulk()` | `Visualizer.plot_against_bulk()` | Simplified interface with better defaults |
| `QC.Plot_Rank()` | `Visualizer.plot_rank_abundance()` | Improved naming for clarity |
| `QC.Plot_sgRNAs_In_Gene()` | `Visualizer.plot_sgrnas_per_gene()` | Improved naming for clarity |

#### Moving to: `ImageAnalysis/utils/stats.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `QC.adjust_to()` | `adjust_intensity_range()` | Standalone function with clear purpose |
| `QC.count_gRNAs()` | `count_sgrnas()` | Simplified interface using pandas |
| `QC.cell_read_stats()` | `calculate_cell_read_statistics()` | More descriptive name, clearer return value |

#### Moving to: `ImageAnalysis/core/genotyping/base.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `QC.Tile_QC()` | `GenotypingPipeline.generate_tile_qc()` | Integrated into pipeline, accepts specific tile/well |
| `QC.Print_QC_Report()` | `GenotypingPipeline.generate_qc_report()` | Takes explicit DataFrame instead of globals |

## 2. Mapping_Functions.py Migration

### Original File: `Mapping_Functions.py`

#### Moving to: `ImageAnalysis/core/mapping.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `Local_to_Global()` | `Mapper.local_to_global()` | Now a method of `Mapper` class |
| `Global_to_Local()` | `Mapper.global_to_local()` | Now a method of `Mapper` class |
| `model_TRS()` | `Mapper.model_trs()` | Clear parameter names, better documentation |
| `fun_min()` | `Mapper._error_function()` | Private method with improved name |
| `Fit_By_Points()` | `Mapper.fit_transformation()` | More descriptive name |
| `Get_Tile_Coordinates()` | `TileInfo.get_tile_coordinates()` | Moved to TileInfo class |
| `Arrange_Tiles()` | `TileInfo.arrange_tiles()` | Moved to TileInfo class |

#### Moving to: `ImageAnalysis/utils/io.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `Open_nd2_to_npy()` | `ImageLoader._nd2_to_array()` | Private helper method with improved error handling |
| `Get_Image_Size()` | `ImageLoader.get_image_size()` | Method of ImageLoader class |

#### Moving to: `ImageAnalysis/core/visualization/plots.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `Plot_4_Center_Tiles()` | `Visualizer.plot_tile_overview()` | More descriptive name |
| `Check_Tile_Configuration()` | `Visualizer.check_tile_configuration()` | Improved visualization |
| `Plot_Point_Mapping()` | `Visualizer.plot_coordinate_mapping()` | More descriptive name |

## 3. Album_Functions.py Migration

### Original File: `Album_Functions.py`

#### Moving to: `ImageAnalysis/core/visualization/albums.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `Select_Album_Cells()` | `AlbumGenerationPipeline.select_sgRNAs()` | Integrated into pipeline with clearer purpose |
| `Make_Cell_Image_From_CSV()` | `Visualizer.create_cell_grid()` | More descriptive name |
| `Save_Cell_Image()` | `Visualizer.save_visualization()` | Generalized for different visualization types |
| `Find_Guides_With_Localizations()` | `AlbumGenerationPipeline._find_localized_sgrnas()` | Private method with specific purpose |

#### Moving to: `ImageAnalysis/core/phenotyping/metrics.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `Crop_Cell_Window()` | `Phenotyper.crop_cell()` | Integrated with phenotyping |
| `Norm()` | `Phenotyper.normalize()` | Simple normalization helper |
| `Smooth_Cell_Outline()` | `Phenotyper._smooth_outline()` | Private helper method |
| `Smooth_Cell()` | `Phenotyper._smooth_region()` | Private helper method |
| `Expand_Mask()` | `Phenotyper._expand_mask()` | Private helper method |
| `Erode_Cell()` | `Phenotyper._erode_mask()` | Private helper method |
| `Outline()` | `Phenotyper._generate_outline()` | Private helper method |
| `Outline_From_Mask()` | `Phenotyper._outline_from_mask()` | Private helper method |

#### Moving to: `ImageAnalysis/utils/visualization.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `Blue_Black_CMAP()` | `create_blue_black_colormap()` | Standalone function for general use |
| `Normalize_Enhance_Constrast()` | `enhance_contrast()` | Simplified interface for general use |
| `Get_Last_2D()` | `extract_2d_slice()` | More descriptive name |

## 4. Script Files Migration

### Original Files: `Segment_10X.py`, `Segment_40X.py`

#### Moving to: `ImageAnalysis/core/segmentation/segmentation_10x.py` and `segmentation_40x.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `main()` | `Segmentation10XPipeline.run()` | Integrated into pipeline class |
| `main()` | `Segmentation40XPipeline.run()` | Integrated into pipeline class |

### Original File: `Genotyping_Pipeline.py`

#### Moving to: `ImageAnalysis/core/genotyping/base.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `main()` | `GenotypingPipeline.run()` | Integrated into pipeline class |

### Original File: `Phenotype_Cells.py`

#### Moving to: `ImageAnalysis/core/phenotyping/base.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `main()` | `PhenotypingPipeline.run()` | Integrated into pipeline class |
| `Crop_Cell()` | `Phenotyper.crop_cell()` | Method of Phenotyper class |
| `Get_DOF()` | `Mapper.get_dof()` | Method of Mapper class |
| `norm()` | `Phenotyper.normalize()` | Consolidated with other normalization functions |
| `Colocalize()` | `Phenotyper.colocalize()` | Method of Phenotyper class |
| `get_r2()` | `Phenotyper.get_r2()` | Method of Phenotyper class |

### Original File: `Make_Albums.py`

#### Moving to: `ImageAnalysis/core/visualization/albums.py`

| Original Function | New Function/Class | Interface Changes |
|-------------------|-------------------|-------------------|
| `main()` | `AlbumGenerationPipeline.run()` | Integrated into pipeline class |
| `Album()` | `AlbumGenerationPipeline.generate_album()` | Method of pipeline class |

## 5. New Components to Create

### New Classes

1. **`Pipeline` (in `ImageAnalysis/core/pipeline.py`)**
   - Abstract base class for all pipeline components
   - Defines common interface and shared functionality
   - Methods: `__init__`, `validate_inputs`, `run`

2. **`SegmentationPipeline` (in `ImageAnalysis/core/segmentation/base.py`)**
   - Abstract base class for segmentation pipelines
   - Inherits from Pipeline
   - Methods: `get_tiles_for_well`, `segment_tile`, `run_for_well`

3. **`BatchProcessor` (in `ImageAnalysis/utils/parallel.py`)**
   - Handles batch processing with parallelization
   - Methods: `__init__`, `get_batch`, `process_serial`, `process_parallel`

4. **`TileInfo` (in `ImageAnalysis/utils/io.py`)**
   - Extracts metadata about wells and tiles
   - Methods: `__init__`, `get_wells`, `get_tiles_for_well`

### New Functions

1. **`setup_logger` (in `ImageAnalysis/utils/logging.py`)**
   - Configures logging with file and console handlers
   - Parameters: name, log_dir, level
   - Returns configured logger

2. **`create_output_directories` (in `ImageAnalysis/cli.py`)**
   - Creates necessary directory structure
   - Used by CLI before running pipelines

## 6. Integration Components

### CLI Module (`ImageAnalysis/cli.py`)

This is an entirely new component that consolidates all command-line interfaces:

| Function | Purpose | Parameters |
|----------|---------|------------|
| `parse_args()` | Parse command-line arguments | args (optional) |
| `main()` | Main entry point for CLI | args (optional) |
| `run_pipeline()` | Run full pipeline | args, logger |
| `run_segmentation()` | Run segmentation only | args, logger |
| `run_genotyping()` | Run genotyping only | args, logger |
| `run_phenotyping()` | Run phenotyping only | args, logger |
| `run_albums()` | Run album generation only | args, logger |

### Configuration Module (`ImageAnalysis/config/settings.py`)

This centralizes all configuration parameters that were previously scattered throughout the code:

| Setting | Type | Purpose |
|---------|------|---------|
| `DATA_DIR` | str | Base directory for input data |
| `RESULTS_DIR` | str | Base directory for output files |
| `NUCLEI_DIAMETER_10X` | int | Nuclear diameter for 10X segmentation |
| `CELL_DIAMETER_10X` | int | Cell diameter for 10X segmentation |
| `NUCLEI_DIAMETER_40X` | int | Nuclear diameter for 40X segmentation |
| `CELL_DIAMETER_40X` | int | Cell diameter for 40X segmentation |
| `DEFAULT_THRESHOLD_STD` | int | Default standard deviation threshold |
| `DEFAULT_LIM_LOW` | float | Default lower limit for quality filtering |
| `DEFAULT_LIM_HIGH` | float | Default upper limit for quality filtering |

## 7. Implementation Notes

1. **Function Signatures**: All function signatures should be updated to:
   - Use explicit parameters instead of globals
   - Provide default values where appropriate
   - Use consistent parameter naming

2. **Documentation**: All functions should have docstrings that specify:
   - Purpose of the function
   - Parameters with types and descriptions
   - Return values with types and descriptions
   - Examples where helpful

3. **Error Handling**: All functions should use consistent error handling:
   - Raise appropriate exceptions instead of returning error codes
   - Use try/except blocks to catch and log errors
   - Provide meaningful error messages

4. **Testing**: Each component should have corresponding unit tests:
   - Test basic functionality
   - Test edge cases
   - Test error handling

5. **Backward Compatibility**: Where possible, maintain backward compatibility:
   - Use wrapper functions when interfaces change significantly
   - Provide clear deprecation warnings for older functions
   - Document migration paths for users