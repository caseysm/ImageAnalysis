#!/usr/bin/env python3
"""Generate an HTML report of the project structure."""

import os
import datetime
import json
from pathlib import Path

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ImageAnalysis Project Structure</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
        }
        h1, h2, h3 {
            color: #2c3e50;
        }
        .container {
            display: flex;
            flex-wrap: wrap;
        }
        .section {
            flex: 1;
            min-width: 300px;
            margin: 10px;
            padding: 15px;
            border-radius: 5px;
            background-color: #f8f9fa;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        pre {
            background-color: #f1f1f1;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
        }
        code {
            font-family: monospace;
        }
        .highlight {
            background-color: #e3f2fd;
            padding: 2px 5px;
            border-radius: 3px;
        }
        .stats {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 20px;
        }
        .stat-card {
            flex: 1;
            min-width: 150px;
            padding: 15px;
            border-radius: 5px;
            background-color: #e3f2fd;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }
        .stat-card h3 {
            margin-top: 0;
            margin-bottom: 5px;
            font-size: 16px;
        }
        .stat-card p {
            font-size: 24px;
            font-weight: bold;
            margin: 0;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            padding: 8px 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>
    <h1>ImageAnalysis Project Structure</h1>
    <p>Report generated on: {date}</p>
    
    <div class="stats">
        <div class="stat-card">
            <h3>Python Files</h3>
            <p>{python_files}</p>
        </div>
        <div class="stat-card">
            <h3>Total Files</h3>
            <p>{total_files}</p>
        </div>
        <div class="stat-card">
            <h3>Directories</h3>
            <p>{directories}</p>
        </div>
        <div class="stat-card">
            <h3>Package Size</h3>
            <p>{package_size}</p>
        </div>
    </div>
    
    <div class="container">
        <div class="section">
            <h2>Package Structure</h2>
            <pre><code>{package_structure}</code></pre>
        </div>
        
        <div class="section">
            <h2>Module Overview</h2>
            <table>
                <tr>
                    <th>Module</th>
                    <th>Files</th>
                    <th>Description</th>
                </tr>
                {module_rows}
            </table>
        </div>
    </div>
    
    <div class="container">
        <div class="section">
            <h2>Command-line Tools</h2>
            <table>
                <tr>
                    <th>Tool</th>
                    <th>Description</th>
                </tr>
                {cli_rows}
            </table>
        </div>
        
        <div class="section">
            <h2>Documentation</h2>
            <table>
                <tr>
                    <th>File</th>
                    <th>Description</th>
                </tr>
                {doc_rows}
            </table>
        </div>
    </div>
    
    <footer>
        <p><small>Generated by the ImageAnalysis project structure reporter</small></p>
    </footer>
</body>
</html>
"""

MODULE_DESCRIPTIONS = {
    "core/segmentation": "Cell segmentation algorithms for 10X and 40X images",
    "core/genotyping": "Cell genotyping and barcode assignment",
    "core/phenotyping": "Cell phenotyping and feature extraction",
    "core/mapping": "Image registration and coordinate mapping",
    "core/visualization": "Data visualization and album creation",
    "utils": "Utility functions for I/O and logging",
    "config": "Configuration settings",
    "bin": "Command-line scripts for running pipelines"
}

CLI_DESCRIPTIONS = {
    "run-segmentation": "Segment cells from microscopy images",
    "run-genotyping": "Assign genotypes to segmented cells",
    "run-phenotyping": "Measure phenotypic features of cells",
    "create-albums": "Create visual albums of cells"
}

DOC_DESCRIPTIONS = {
    "README.md": "Main project documentation",
    "INSTALLATION.md": "Installation instructions",
    "MIGRATION_GUIDE.md": "Guide for migrating from old to new structure",
    "PACKAGE_STRUCTURE.md": "Description of package organization",
    "CLEANING_GUIDE.md": "Guide to project cleanup process",
    "CHANGELOG.md": "Record of project changes",
    "FunctionReference.md": "Reference of available functions"
}

def count_files_by_type(directory):
    """Count files by extension in a directory."""
    extension_counts = {}
    for root, _, files in os.walk(directory):
        for file in files:
            ext = os.path.splitext(file)[1].lower()
            if ext:
                extension_counts[ext] = extension_counts.get(ext, 0) + 1
            else:
                extension_counts["no_extension"] = extension_counts.get("no_extension", 0) + 1
    return extension_counts

def get_directory_size(directory):
    """Get the size of a directory in bytes."""
    total_size = 0
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            total_size += os.path.getsize(file_path)
    return total_size

def format_size(size_bytes):
    """Format bytes to human-readable form."""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.2f} {unit}"
        size_bytes /= 1024.0
    return f"{size_bytes:.2f} TB"

def get_package_structure(directory, prefix="", max_depth=4, current_depth=0):
    """Generate a tree-like representation of the directory structure."""
    if current_depth > max_depth:
        return prefix + "...\n"
    
    result = ""
    entries = sorted(os.listdir(directory))
    dirs = [d for d in entries if os.path.isdir(os.path.join(directory, d)) and not d.startswith(".")]
    files = [f for f in entries if os.path.isfile(os.path.join(directory, f)) and not f.startswith(".")]
    
    for i, d in enumerate(dirs):
        is_last = i == len(dirs) - 1 and not files
        marker = "└── " if is_last else "├── "
        next_prefix = prefix + "    " if is_last else prefix + "│   "
        result += f"{prefix}{marker}{d}/\n"
        result += get_package_structure(
            os.path.join(directory, d), 
            next_prefix, 
            max_depth,
            current_depth + 1
        )
    
    for i, f in enumerate(files):
        is_last = i == len(files) - 1
        marker = "└── " if is_last else "├── "
        result += f"{prefix}{marker}{f}\n"
    
    return result

def count_files_in_module(base_dir, module_path):
    """Count the number of Python files in a module."""
    full_path = os.path.join(base_dir, module_path)
    if not os.path.exists(full_path):
        return 0
    
    count = 0
    for root, _, files in os.walk(full_path):
        for file in files:
            if file.endswith(".py"):
                count += 1
    return count

def generate_module_rows(base_dir):
    """Generate HTML table rows for modules."""
    rows = ""
    for module, description in MODULE_DESCRIPTIONS.items():
        file_count = count_files_in_module(base_dir, module)
        rows += f"""
        <tr>
            <td>{module}</td>
            <td>{file_count}</td>
            <td>{description}</td>
        </tr>
        """
    return rows

def generate_cli_rows():
    """Generate HTML table rows for CLI tools."""
    rows = ""
    for tool, description in CLI_DESCRIPTIONS.items():
        rows += f"""
        <tr>
            <td>{tool}</td>
            <td>{description}</td>
        </tr>
        """
    return rows

def generate_doc_rows(base_dir):
    """Generate HTML table rows for documentation files."""
    rows = ""
    for doc, description in DOC_DESCRIPTIONS.items():
        if os.path.exists(os.path.join(base_dir, doc)):
            rows += f"""
            <tr>
                <td>{doc}</td>
                <td>{description}</td>
            </tr>
            """
    return rows

def generate_report():
    """Generate the HTML report."""
    base_dir = os.path.dirname(os.path.abspath(__file__))
    package_dir = os.path.join(base_dir, "imageanalysis")
    
    # Count files
    total_files = sum(len(files) for _, _, files in os.walk(base_dir))
    python_files = sum(1 for root, _, files in os.walk(base_dir) 
                        for file in files if file.endswith('.py'))
    directories = sum(1 for root, dirs, _ in os.walk(base_dir) for _ in dirs)
    package_size = format_size(get_directory_size(package_dir))
    
    # Generate structure
    package_structure = get_package_structure(package_dir)
    
    # Generate table rows
    module_rows = generate_module_rows(package_dir)
    cli_rows = generate_cli_rows()
    doc_rows = generate_doc_rows(base_dir)
    
    # Fill template
    report_html = HTML_TEMPLATE.format(
        date=datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        python_files=python_files,
        total_files=total_files,
        directories=directories,
        package_size=package_size,
        package_structure=package_structure,
        module_rows=module_rows,
        cli_rows=cli_rows,
        doc_rows=doc_rows
    )
    
    # Write to file
    report_path = os.path.join(base_dir, "structure_report.html")
    with open(report_path, "w") as f:
        f.write(report_html)
    
    print(f"Report generated at: {report_path}")

if __name__ == "__main__":
    generate_report()